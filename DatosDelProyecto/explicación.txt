La clase grafo se instancia con dos variables self: nodos y arista(debería ser aristas) ambas son listas

La clase tiene estos métodos: 

addNodo:
	Éste método recibe una refetencia self de la clase, y un nodo como parámetro
	Lo que hace es guardar dentro de la lista "self.nodos" el nodo que llega como parámetro.

addArista:
	Éste método recibe una referencia self de la clase, y una arista como parámetro, esta arista podrá ser un objeto arista o los datos que componen a una arista.
	"*args" significa que addArista puede recibir cualquier cantidad de argumentos posicionales adicionales después del primer argumento
	En el caso de que sea un objeto arista lo añade a la lista self.Arista, en el caso que sean sólo los datos de una arista primero crea un objeto arista con esos datos y luego añade ese objeto a la lista self.arista

getRelacionados
	Ésta método recibe como parámetro una referencia a la clase y un nodo, devolverá todos los nodos relacionados con el nodo enviado como parámetro.
	Para esto crea una lista vacía llamada "nodosTotales" y utilizando un for each toma cada arista en la lista self.Arista(debería ser aristas) 
	Por cada arista de toma de self.Arista pregunta: ¿Esta arista contiene el nodo enviado como parámetro? (Esto es un método de la clase arista). En el caso afirmativo, se le pregunta a la arista cuál es el nodo que está conectando con el nodo parámetro (Esto es un método de la clase Arista), y dicho nodo se arega a la lista "nodosTotales"

getAristasDeNodo
	Ésta método recibe como parámetro una referencia a la clase y un nodo, devolverá las aristas que tenga un nodo en forma de lista.
	Para esto crea una lista llamada "aristasTotales"
	Y por medio de un for each tomará cada arista en self.Arista(debería ser aristas) para preguntarle ¿Tenés al nodo parámetro? (Esto es un método de la case Arista) En caso afimativo añade la arista a la lista aristasTotales, cuando termina de recorrer todas las aristas devuelve la lista aristasTotales, que en el caso de el nodo contener aristas, estas estarán ahora listadas.
	


getAristaLiviana

La clase "Dijksta": 
	La clase Dijstra se intancia con un contructor con varios parámetros: Una referencia self de sí misma, un objeto grafo, un nodo inicial y un nodo final. 
	Y por medio del constructor se crean las siguientes varialbes self: 
	self.grafo: donde se guarda el grafo parámetro
	self.nodoInicial: se almacena el nodo inicial
	self.nodoFinal: se almacena el nodo final
	self.nodoActual: se inicia como el nodo inicial también
	self.nodosVisitados: una lista vacía donde se guardarán los nodos visitados.
	
	Lo primero que hace es guardar en la lista de nodos visitados el nodo considerado actual, que al principio será el nodo inicial.

	Genera un diccionario llamado self.DistanciasAux, que guardará en el key el nodo actual y en el value el peso de la arista.

	En ese mismo diccionario guarda la el nodo actual(que será el inicial) con peso 0

		Método getCamino

			El método getCamino recibe como parámetro una referencia a la clase Dijksta.

			crea una variable aristas será una lista que guarda todas las aristas del nodo actual, para eso utiliza un método de la clase grafo.

			Con un for each toma cada arista dentro de la nueva lista aristas, le pide el otro nodo que conecta al primer nodo (nodo actual) y le asigna como valor del diccionario la distancia.

			Luego llama al método recorre de la propia clase, en le caso de que este devuelva true (lo devolverá cando llegue al nodo final, es decir, haya encontrado el camino) devolverá la DistanciaAux del nodo acutal, que para entonces el nodo acutal será el nodo final.

		Método recorrer
			
			El método recorre recibe como parámetro una referencia de la propia clase Dijksta para usar sus variables self.

			actualiza el valor de selctual por medio de una llamada a la función propia de la clase nodoMenor() (que devolverá el nodo de menor distancia desde nodo inicial regitrado en el mapa)

			actualiza el valor de 


			

			



		Método nodoMenor
			
			Devuelve el nodo de menor distancia que no se haya visitado
			
			Ordena el mapa de menor a mayor,lo recorre en un for each y devuelve el primer nodo que no este dentr

		Método getAristaLiviana

			Devuelve el peso de la arista mas liviana que su otro nodo no haya sido visitado

	Tortuga
		La clase tortuga utiliza la libreria propia de python llamada "turtle" con la cual nos ayudamos para dibujar los grafos. En el caso de la clase "tortuga" se establecen las posiciones de los nodos de manera aleatoria, para luego utilizar un algoritmo de fuerzas de repulsión o atracción entre los nodos. Este nos permite generar nuevos grafos ingresándole la matriz de incidencia del grafo

	Tortugadefinida
		Esta tambien utilizamos la libreria "turtle" para dibujar un grafo, pero ya tenemos predefinido un grafo y las posiciones de sus nodos en el plano, por lo que no es posible asignar un nuevo grafo sin tener que editar a mano las posiciones de sus nodos.